package dev.stardust.commands;

import java.io.File;
import java.nio.file.*;
import dev.stardust.Stardust;
import javax.imageio.ImageIO;
import net.minecraft.text.Text;
import javax.annotation.Nullable;
import java.awt.image.BufferedImage;
import dev.stardust.util.StardustUtil;
import net.minecraft.sound.SoundEvents;
import net.minecraft.command.CommandSource;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.client.MinecraftClient;
import meteordevelopment.orbit.EventHandler;
import java.util.concurrent.ThreadLocalRandom;
import java.nio.file.attribute.BasicFileAttributes;
import meteordevelopment.meteorclient.MeteorClient;
import net.minecraft.client.util.ScreenshotRecorder;
import meteordevelopment.meteorclient.commands.Command;
import com.mojang.brigadier.arguments.StringArgumentType;
import static com.mojang.brigadier.Command.SINGLE_SUCCESS;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import meteordevelopment.meteorclient.events.world.TickEvent;
import meteordevelopment.meteorclient.utils.files.StreamUtils;


/**
 * @author Tas [0xTas] <root@0xTas.dev>
 **/
public class Panorama extends Command {
    public Panorama() {
        super("panorama", "Takes a panorama and saves it to a custom resource pack for the main menu screen.", "take");
        MeteorClient.EVENT_BUS.subscribe(this);
    }

    private int timer = 10;
    private int screenshot = 0;
    private float preYaw = 69f;
    private float prevYaw = 69f;
    private float prePitch = 69f;
    private float prevPitch = 69f;
    private int preWidth = 42069;
    private int preHeight = 42069;

    private boolean isWarming = false;
    private boolean takingPanorama = false;
    private boolean readyToAssemble = false;
    @Nullable
    private Path currentPanoramaDir = null;
    @Nullable
    private MinecraftClient instance = null;

    private void takeWarmedScreenshot() {
        if (this.currentPanoramaDir == null || this.instance == null) return;

        ScreenshotRecorder.saveScreenshot(
            this.currentPanoramaDir.toFile(),
            "panorama_"+this.screenshot+".png",
            this.instance.getFramebuffer(), msg -> {}
        );

        ++this.screenshot;
        this.isWarming = false;
    }

    private void startPanoramaProcess(String name) {
        Path panoramaDir = FabricLoader.getInstance().getGameDir().resolve("meteor-client/panoramas/"+name);

        MinecraftClient mc = MinecraftClient.getInstance();
        if (mc.player == null) return;

        try {
            //noinspection ResultOfMethodCallIgnored
            panoramaDir.toFile().mkdirs();
        }catch (Exception err) {
            err.printStackTrace();
        }

        this.instance = mc;
        this.screenshot = 0;
        this.preYaw = mc.player.getYaw();
        this.prevYaw = mc.player.prevYaw;
        this.prePitch = mc.player.getPitch();
        this.prevPitch = mc.player.prevPitch;
        this.currentPanoramaDir = panoramaDir;
        this.preWidth = mc.getWindow().getFramebufferWidth();
        this.preHeight = mc.getWindow().getFramebufferHeight();
        this.instance.getWindow().setFramebufferWidth(4096);
        this.instance.getWindow().setFramebufferHeight(4096);
        this.instance.getFramebuffer().resize(4096, 4096, MinecraftClient.IS_SYSTEM_MAC);

        this.takingPanorama = true;
    }

    private void assembleResourcePack() {
        if (this.instance == null || this.currentPanoramaDir == null) return;
        Path resourcePacks = FabricLoader.getInstance().getGameDir().resolve("resourcepacks");
        Path screenshotsFolder = FabricLoader.getInstance().getGameDir().resolve("meteor-client/panoramas/"+this.currentPanoramaDir.getFileName()+"/screenshots");
        Path customBaseFolder = resourcePacks.resolve(this.currentPanoramaDir.getFileName());
        Path customPackFolder = customBaseFolder.resolve("assets/minecraft/textures/gui/title/background/");
        //noinspection ResultOfMethodCallIgnored
        customPackFolder.toFile().mkdirs();

        String mcMeta = "{"+"\n"+"    \"pack\": {\"pack_format\": 15,\"description\": \"\\u00A73"+this.currentPanoramaDir.getFileName()+"_panorama\\n\\u00A72\\u00A7oGenerated by Stardust\\u00A7d\\u00A7o\\u2728\"}"+"\n"+"}";
        try {
            int luckyNumber = ThreadLocalRandom.current().nextInt(6);
            Files.walkFileTree(screenshotsFolder, new SimpleFileVisitor<>() {
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
                    StreamUtils.copy(file.toFile(), customPackFolder.resolve(file.getFileName()).toFile());

                    // Pick a random pack.png from the screenshot set
                    if (file.getFileName().toString().contains(String.valueOf(luckyNumber))) {
                        StreamUtils.copy(file.toFile(), customBaseFolder.resolve("pack.png").toFile());
                    }

                    return FileVisitResult.CONTINUE;
                }
            });

            File packMeta = customBaseFolder.resolve("pack.mcmeta").toFile();
            if (!packMeta.createNewFile()) {
                error("[Stardust] Failed to assemble custom resource pack! Does a pack of that name already exist?");
                Stardust.LOG.error("[Stardust] Failed to assemble custom resource pack.");
                return;
            }
            Files.write(packMeta.toPath(), mcMeta.getBytes());

            // Remove the ugly white-to-black vignette overlay that Minecraft uses for its menu panoramas by default.
            // You can restore the original look by deleting panorama_overlay.png from your generated resource pack.
            BufferedImage transparentOverlay = new BufferedImage(16, 128, BufferedImage.TYPE_INT_ARGB);
            File overlayImage = customPackFolder.resolve("panorama_overlay.png").toFile();
            ImageIO.write(transparentOverlay, "PNG", overlayImage);
        } catch (Exception err) {
            Stardust.LOG.error("[Stardust] "+err);
            error(err.toString());
        }

        this.readyToAssemble = false;
        if (this.instance.player != null) {
            this.instance.player.playSound(SoundEvents.BLOCK_AMETHYST_BLOCK_CHIME, 1f, 1f);
            this.instance.player.sendMessage(Text.of("§8<" + StardustUtil.rCC() + "✨§8> §3§oYour resource pack is ready to be enabled§f§o!"));
        }
    }

    @Override
    public void build(LiteralArgumentBuilder<CommandSource> builder) {
        builder.then(
            argument("name", StringArgumentType.word()).executes(ctx -> {
                String name = ctx.getArgument("name", String.class);
                this.startPanoramaProcess(name);
                return SINGLE_SUCCESS;
            })
        );
    }

    @EventHandler
    private void onTick(TickEvent.Post event) {
        if (this.instance == null || this.instance.player == null || this.currentPanoramaDir == null) return;

        if (this.timer > 0) {
            --this.timer;
            return;
        } else {
            this.timer = 10;
        }

        if (this.readyToAssemble) {
            this.assembleResourcePack();
        }
        if (!this.takingPanorama) return;

        // When using Iris mod, the vanilla takePanorama impl will produce blank screenshots.
        // Original issue: https://github.com/IrisShaders/Iris/issues/2196#issuecomment-1873043947
        // To overcome this, I've reimplemented the vanilla takePanorama method in a way that works with Iris.
        switch (this.screenshot) {
            case 0 -> {
                if (!this.isWarming) {
                    this.instance.gameRenderer.setRenderingPanorama(true);
                    this.instance.gameRenderer.setBlockOutlineEnabled(false);
                    this.instance.worldRenderer.reloadTransparencyPostProcessor();
                    if (!this.instance.options.hudHidden) this.instance.options.hudHidden = true;
                    this.instance.player.setYaw(this.preYaw);
                    this.instance.player.setPitch(0f);
                    this.isWarming = true;
                } else this.takeWarmedScreenshot();
            }
            case 1 -> {
                if (!this.isWarming) {
                    this.instance.player.setYaw((this.preYaw + 90f) % 360f);
                    this.instance.player.setPitch(0f);
                    this.isWarming = true;
                } else this.takeWarmedScreenshot();
            }
            case 2 -> {
                if (!this.isWarming) {
                    this.instance.player.setYaw((this.preYaw + 180f) % 360f);
                    this.instance.player.setPitch(0f);
                    this.isWarming = true;
                } else this.takeWarmedScreenshot();
            }
            case 3 -> {
                if (!this.isWarming) {
                    this.instance.player.setYaw((this.preYaw - 90f) % 360f);
                    this.instance.player.setPitch(0f);
                    this.isWarming = true;
                } else this.takeWarmedScreenshot();
            }
            case 4 -> {
                if (!this.isWarming) {
                    this.instance.player.setYaw(this.preYaw);
                    this.instance.player.setPitch(-90f);
                    this.isWarming = true;
                } else this.takeWarmedScreenshot();
            }
            default -> {
                if (!this.isWarming) {
                    this.instance.player.setYaw(this.preYaw);
                    this.instance.player.setPitch(90f);
                    this.isWarming = true;
                } else {
                    this.takeWarmedScreenshot();
                    this.takingPanorama = false;
                    this.instance.player.setYaw(preYaw);
                    this.instance.player.setPitch(prePitch);
                    this.instance.player.prevYaw = this.prevYaw;
                    this.instance.player.prevPitch = this.prevPitch;
                    this.instance.gameRenderer.setRenderingPanorama(false);
                    this.instance.gameRenderer.setBlockOutlineEnabled(true);
                    this.instance.getWindow().setFramebufferWidth(preWidth);
                    this.instance.getWindow().setFramebufferHeight(preHeight);
                    if (this.instance.options.hudHidden) this.instance.options.hudHidden = false;
                    this.instance.getFramebuffer().resize(preWidth, preHeight, MinecraftClient.IS_SYSTEM_MAC);
                    this.instance.worldRenderer.reloadTransparencyPostProcessor();

                    this.timer = 100; // wait a few seconds for the screenshot files to get fully written to disk,
                    this.readyToAssemble = true; // and then copy them into a resource pack (this avoids copying empty files.)
                    this.instance.player.sendMessage(
                        Text.of("§8<§2§o✨§8> §8§oFinalizing resource pack§2§o, §8§oplease wait§2§o...")
                    );
                }
            }
        }
    }
}
